@HostAddress = https://localhost:5001
@JwtToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjE3N2I1ZmY3LTQ1ZjctNGZjNS1hMWU5LTI3ODQ4ODM1YTg5ZCIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL2VtYWlsYWRkcmVzcyI6InRlc3R1c2VyQHZhY2F0dXJlcy5hcGkiLCJqdGkiOiIxNTQ0NTE0ZC04Mjg0LTQ4OGMtOTgzNC1mNTAzZTk2N2E2MGIiLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOiJDb250cmlidXRvciIsImV4cCI6MTc0NDk3MTIzNCwiaXNzIjoiVmFjYXR1cmVzQXBpIiwiYXVkIjoiVmFjYXR1cmVzQXBpQXVkaWVuY2UifQ.3MPgZcpj-ajNbaVxkLS67m9Hz-_z2ONOSb6TJoVBVgg

### Add a user for authentication
### Should return 200
POST {{HostAddress}}/api/auth/register
Content-Type: application/json
Authorization: Bearer {{JwtToken}}

{
  "email": "testuser@vacatures.api",
  "password": "Password123!",
  "firstName": "Test",
  "lastName": "User",
  "roles": ["Contributor"]
}

### Login as existing user for authentication
### Should return 200 with a token
### Use the token in the Authorization header
### Authorization: Bearer <your_received_token>
POST {{HostAddress}}/api/auth/login
Content-Type: application/json
Authorization: Bearer {{JwtToken}}

{
  "email": "testuser@vacatures.api",
  "password": "Password123!"
}

### GET a non-existing route
### Should return 404
GET {{HostAddress}}/api/thisdoesnotexist/
Authorization: Bearer {{JwtToken}}

### Features/Vacatures/List: GET a paged list of vacatures
### Should return 200 with a list (if any)
GET {{HostAddress}}/api/vacatures/
Authorization: Bearer {{JwtToken}}

### Features/Vacatures/GetById: GET a single vacature by VacatureId
### Should return 200 with a vacature (if VacatureId exists)
GET {{HostAddress}}/api/vacatures/f9d6c2cc-8ac1-4aff-b9b9-d45bcc06368f
Authorization: Bearer {{JwtToken}}

### Features/Vacatures/GetById: GET a non-existing vacature by VacatureId
### Should return 404 with exception message
GET {{HostAddress}}/api/vacatures/e349a619-c06c-4ae4-85e0-b7064d6af22a
Authorization: Bearer {{JwtToken}}

### Features/Vacatures/Create: POST a new vacature
### Should return 201 with the created vacature
POST {{HostAddress}}/api/vacatures
Content-Type: application/json
Authorization: Bearer {{JwtToken}}

{
  "UrlSlug": "junior-software-engineer-net",
  "FunctionTitle": "Software Engineer (.NET)",
  "Availability": "Full-time",
  "Location": "Utrecht, Netherlands",
  "ContactPerson": "Janne Siemen",
  "Description": "We are looking for a .NET developer to join our team.",
  "WhatToExpect": "Challenging projects, modern tech stack, great team culture",
  "Responsibilities": "Develop and maintain .NET applications, mentor junior developers",
  "Offer": "Competitive salary, professional growth, flexible working hours",
  "Requirements": "A few years of .NET development, strong C# skills, microservices experience",
  "SalaryRange": "€60,000 - €80,000",
  "Industry": "Technology",
  "ListPriority": 1,
  "Hidden": false,
  "CreatedAt": "2024-12-01T12:00:00.722Z",
  "updatedAt": "2024-12-01T12:00:00.722Z"
}

### Features/Vacatures/Create: POST an incomplete vacature
### Should return 400 with validation errors
POST {{HostAddress}}/api/vacatures
Content-Type: application/json
Authorization: Bearer {{JwtToken}}

{
  "VacatureId": "e349a619-c06c-4ae4-85e0-b7064d6af44e",
  "UrlSlug": "this-should-not-get-added"
}

### Features/Vacatures/Delete: DELETE a single vacature by VacatureId
### Should return 204 (if VacatureId existed and was deleted)
DELETE {{HostAddress}}/api/vacatures/c9d88e98-b843-4959-a805-83f7cae73dc2
Authorization: Bearer {{JwtToken}}

### Features/Vacatures/Delete: DELETE a non-existing vacature by VacatureId
### Should return 404 with exception message
DELETE {{HostAddress}}/api/vacatures/e349a619-c06c-4ae4-85e0-b7064d6af44d
Authorization: Bearer {{JwtToken}}

### Features/Vacatures/Delete: DELETE with missing VacatureId
### Should return 405
DELETE {{HostAddress}}/api/vacatures/
Authorization: Bearer {{JwtToken}}

### Features/Vacatures/Update: PUT update a single vacature by VacatureId
### Should return 200 (if VacatureId exists and was updated)
PUT {{HostAddress}}/api/vacatures/f9d6c2cc-8ac1-4aff-b9b9-d45bcc06368f
Content-Type: application/json
Authorization: Bearer {{JwtToken}}

{
  "VacatureId": "f9d6c2cc-8ac1-4aff-b9b9-d45bcc06368f",
  "UrlSlug": "url-slug-was-updated-by-id"
}

### Features/Vacatures/Update: PUT update a non-existing vacature by VacatureId
### Should return 404 with exception message
PUT {{HostAddress}}/api/vacatures/e349a619-c06c-4ae4-85e0-b7064d6af44d
Content-Type: application/json
Authorization: Bearer {{JwtToken}}

{
  "VacatureId": "e349a619-c06c-4ae4-85e0-b7064d6af42a",
  "UrlSlug": "url-slug-should-not-be-updated-because-id-does-not-exist"
}